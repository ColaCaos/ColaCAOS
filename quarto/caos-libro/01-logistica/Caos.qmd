---
format:
  html:
    math: katex
execute:
  enabled: true
  echo: false
---

# Caos

Como dijimos en la seccíón anterior, a partir de $r_\infty \approx 3.56995$, el mapa logístico entra en un **régimen caótico**. Para $r < r_\infty$, aparecían sucesivas bifurcaciones de periodo $1 \to 2 \to 4 \to 8 \to \cdots$.
En $r = r_\infty$, esas bifurcaciones se acumulan y ya no hay ciclos periódicos finitos: el valor final se vuelve errático. Sin embargo a medida que vamos observando el mapa aparecen comportamientos extraños.

## División en bandas
Justo tras $r_\infty$, la zona caótica se **parte en dos bandas** disjuntas: en el diagrama de bifurcación aparecen dos hileras de puntos con un hueco entre ellas.

```{python}
import numpy as np
import matplotlib.pyplot as plt

def bifurcation(r_min, r_max, r_steps=2000, iters=1000, last=200):
    r_vals = np.linspace(r_min, r_max, r_steps)
    x = 1e-5 * np.ones(r_steps)
    # iterate the map
    for i in range(iters):
        x = r_vals * x * (1 - x)
        if i >= (iters - last):
            plt.plot(r_vals, x, ',')
    plt.xlim(r_min, r_max)
    plt.ylim(0, 1)
    plt.xlabel('r')
    plt.ylabel('x')
    plt.show()

# 1. División en dos bandas (r ∈ [r∞, 3.6])
plt.figure()
bifurcation(3.56995, 3.6)

```

A medida que subimos $r$, esas dos bandas se bifurcan en 4, luego en 8, repitiendo la misma lógica de duplicación pero sobre la estructura del caos.

```{python}
import numpy as np
import matplotlib.pyplot as plt

def bifurcation(r_min, r_max, r_steps=2000, iters=1000, last=200):
    r_vals = np.linspace(r_min, r_max, r_steps)
    x = 1e-5 * np.ones(r_steps)
    # iterate the map
    for i in range(iters):
        x = r_vals * x * (1 - x)
        if i >= (iters - last):
            plt.plot(r_vals, x, ',')
    plt.xlim(r_min, r_max)
    plt.ylim(0, 1)
    plt.xlabel('r')
    plt.ylabel('x')
    plt.show()

# 2. Aparición de 4 y 8 bandas (r ∈ [3.6, 3.7])
plt.figure()
bifurcation(3.6, 3.7)

```


## Ventanas de periodicidad
En medio del caos surgen **islas** de orden donde aparece un ciclo estable de periodo $k$ (por ejemplo, un ciclo de orden 3 alrededor de $r\approx3.828$).

```{python}
import numpy as np
import matplotlib.pyplot as plt

def bifurcation(r_min, r_max, r_steps=2000, iters=1000, last=200):
    r_vals = np.linspace(r_min, r_max, r_steps)
    x = 1e-5 * np.ones(r_steps)
    # iterate the map
    for i in range(iters):
        x = r_vals * x * (1 - x)
        if i >= (iters - last):
            plt.plot(r_vals, x, ',')
    plt.xlim(r_min, r_max)
    plt.ylim(0, 1)
    plt.xlabel('r')
    plt.ylabel('x')
    plt.show()

# 3. Ventanas de periodicidad (islas): alrededor de r≈3.828
plt.figure()
bifurcation(3.75, 3.9)

```
Dentro de cada ventana periódica se reproduce una **mini-cascada** de duplicación de periodo $k \to 2k \to 4k \to \cdots$. Lo mismo que teníamos en la zona $3 < r < 3.56995$ pero ahora dentro de la zona caótica. Vemos como el caos da paso de nuevo a las órbitas periódicas

```{python}
import numpy as np
import matplotlib.pyplot as plt

def bifurcation(r_min, r_max, r_steps=2000, iters=1000, last=200):
    r_vals = np.linspace(r_min, r_max, r_steps)
    x = 1e-5 * np.ones(r_steps)
    # iterate the map
    for i in range(iters):
        x = r_vals * x * (1 - x)
        if i >= (iters - last):
            plt.plot(r_vals, x, ',')
    plt.xlim(r_min, r_max)
    plt.ylim(0, 1)
    plt.xlabel('r')
    plt.ylabel('x')
    plt.show()
# 4. Mini-cascada dentro de una ventana (zoom en periodo-3): r ∈ [3.82, 3.843]
plt.figure()
bifurcation(3.82, 3.843)

```


## Repetición infinita
Las ventanas de periodicidad están **infinitamente repetidas**: en cada fragmento de la región caótica, por pequeño que sea, habrá alguna ventana donde emerja un ciclo estable.

Así vemos como enre 3.73 y 3.76 aparecen un ciclo de período 5.

```{python}
import numpy as np
import matplotlib.pyplot as plt

def bifurcation(r_min, r_max, r_steps=2000, iters=1000, last=200):
    r_vals = np.linspace(r_min, r_max, r_steps)
    x = 1e-5 * np.ones(r_steps)
    # iterate the map
    for i in range(iters):
        x = r_vals * x * (1 - x)
        if i >= (iters - last):
            plt.plot(r_vals, x, ',')
    plt.xlim(r_min, r_max)
    plt.ylim(0, 1)
    plt.xlabel('r')
    plt.ylabel('x')
    plt.show()
# 5a. Otra ventana (periodo-5 alrededor de r≈3.738): r ∈ [3.72, 3.78]
plt.figure()
bifurcation(3.72, 3.78)

```
Si nos centramos en los valores de x alrededor de 0.5, vemos claramente el diagrama de bifurcación inicial replicado aquí, con tan solo 1000 iteraciones.

```{python}
import numpy as np
import matplotlib.pyplot as plt

def bifurcation(r_min, r_max, r_steps=2000, iters=1000, last=200):
    r_vals = np.linspace(r_min, r_max, r_steps)
    x = 1e-5 * np.ones(r_steps)
    # iterate the map
    for i in range(iters):
        x = r_vals * x * (1 - x)
        if i >= (iters - last):
            plt.plot(r_vals, x, ',')
    plt.xlim(r_min, r_max)
    plt.ylim(0.4, 0.6)
    plt.xlabel('r')
    plt.ylabel('x')
    plt.show()
# 5b. Otra ventana : r ∈ [3.7389, 3.7480]
plt.figure()
bifurcation(3.7389, 3.7480)

```
Y dentro de esta replicación del diagrama de bifurcación original, podemos encontrar el ciclo de periodo 5 de nuevo, en los valores de $r$ comprendidos entre 3.74431 y 3.74433. 

```{python}
import numpy as np
import matplotlib.pyplot as plt

def bifurcation(r_min, r_max, r_steps=5000, iters=5000, last=200):
    r_vals = np.linspace(r_min, r_max, r_steps)
    x = 1e-5 * np.ones(r_steps)
    # iterate the map
    for i in range(iters):
        x = r_vals * x * (1 - x)
        if i >= (iters - last):
            plt.plot(r_vals, x, ',')
    plt.xlim(r_min, r_max)
    plt.ylim(0.475, 0.525)
    plt.xlabel('r')
    plt.ylabel('x')
    plt.show()

# 5d. Otra ventana : r ∈ [3.7468, 3.7471]
plt.figure()
bifurcation(3.74431, 3.74433)
```

Y de nuevo, cogemos la replicación del diagrama de bifurcación original alrededor de 0.5 y nos encontramos con el ciclo de periodo 5 de nuevo, en los valores de $r$ comprendidos entre 3.74432144 y 3.744321455. Cada vez necesitaremos más iteraciones para apreciar el diagrama de bifurcación original. De hecho, para plotear esta última gráfica se han requerido 100.000 iteraciones



```{python}
import numpy as np
import matplotlib.pyplot as plt

def bifurcation(r_min, r_max, r_steps=5000, iters=200000, last=200):
    r_vals = np.linspace(r_min, r_max, r_steps)
    x = 1e-5 * np.ones(r_steps)
    # iterate the map
    for i in range(iters):
        x = r_vals * x * (1 - x)
        if i >= (iters - last):
            plt.plot(r_vals, x, ',')
    plt.xlim(r_min, r_max)
    plt.ylim(0.49928, 0.5005)
    plt.xlabel('r')
    plt.ylabel('x')
    plt.show()

# 5d. Otra ventana : r ∈ [3.7468, 3.7471]
plt.figure()
bifurcation(3.74432144, 3.744321455)
```

Haciendo de nuevo zoom en torno a 0.5, vemos como aparece el diagrama de bifurcación original, esta vez en los valores de $r$ comprendidos entre 3.7443214444 y 3.744321448 , tras 1.000.000 de iteraciones. 
```{python}
import numpy as np
import matplotlib.pyplot as plt

def bifurcation(r_min, r_max, r_steps=5000, iters=1000000, last=200):
    r_vals = np.linspace(r_min, r_max, r_steps)
    x = 1e-5 * np.ones(r_steps)
    # iterate the map
    for i in range(iters):
        x = r_vals * x * (1 - x)
        if i >= (iters - last):
            plt.plot(r_vals, x, ',')
    plt.xlim(r_min, r_max)
    plt.ylim(0.49995, 0.50005)
    plt.xlabel('r')
    plt.ylabel('x')
    plt.show()

# 5d. Otra ventana : r ∈ [3.7468, 3.7471]
plt.figure()
bifurcation(3.744321442, 3.744321451)
```


Podemos seguir así infinitamente. Lo que hemos encontrado es una **estructura fractal**. 