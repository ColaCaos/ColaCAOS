---
format:
  html:
    math: katex
execute:
  enabled: true
  echo: false
---

# El Péndulo Doble

## Introducción
El péndulo doble es quizás uno de los sistemas físicos más estudiados en el ámbito de la teoría del caos. Esto es debido a que tiene unas ecuaciones deterministas muy bien conocidas, y a la contraposición con el péndulo simple. Es decir, mientras que en el péndulo simple con unas ecuaciones relativamente más sencillas podemos predecir "ad infinitum" la posición y velocidad del péndulo, en el caso del péndulo doble, que no son más que dos péndulos sencillos acoplados, no podemos predecir más allá de unos pocos segundos. 

Dicho de otra manera, un péndulo simple, como el que estudió Galileo, es un sistema que encaja perfectamente en la mecánica clásica y que se comporta de una forma determinista, mientras que un péndulo doble tiene un comportamiento imposible de predecir tras unos pocos segundos. Ambos están regidos por las mismas leyes de la física, y el péndulo doble es ligeramente más complejo, pero su comportamiento es totalmente impredecible. Todo ello a pesar de tener unas ecuaciones que describen a la perfección su comportamiento. 

El análisis matemático de ambos sistemas, el péndulo simple y doble, se puede obtener en muchas referencias, por ejemplo en <https://paginaspersonales.unam.mx/app/webroot/files/4554/Publica_20190605182303.pdf>. El análisis matemático del péndulo doble está muy por encima del nivel de bachillerato. 

Sin embargo podemos recurrir a la simulación y experimentación real para analizar su comportamiento. Empezaremos por realizar simulaciones y comprobar en el ordenador como se comporta el péndulo doble. Pero, ¿no resulta muy complicado hacer la simulación de un péndulo doble?. ¿Acaso no habría que implementar las ecuaciones del péndulo doble, que resultan realmente complicadas de analizar matemáticamente?. Tenemos dos soluciones para ello:

* Podemos utilizar simuladores de física como Algodoo <https://www.algodoo.com/>
* Podemos pedirle a ChatGPT que nos haga una simulación en Python.

En este proyecto, he optado por la segunda alternativa, y los resultados han sido espectaculares. Usando uno de los modelos más avanzados de OpenAI, el mini4-high, la codificación resultó directa y sin errores. Copiando el código generado, y ejecutándolo desde mi ordenador pude tener en unos pocos minutos 

