[
  {
    "objectID": "posts/mapa-logistico.html",
    "href": "posts/mapa-logistico.html",
    "title": "El Mapa Logístico",
    "section": "",
    "text": "El mapa logístico es una de las ecuaciones en diferencia más clásicas de la teoría del caos:\n\\[\nx_{n+1} = r\\,x_n\\,(1 - x_n)\n\\]\ndonde:\n\n\\(x_n \\in [0,1]\\) es la población normalizada.\n\\(r\\) regula la tasa de crecimiento."
  },
  {
    "objectID": "posts/mapa-logistico.html#introducción",
    "href": "posts/mapa-logistico.html#introducción",
    "title": "El Mapa Logístico",
    "section": "",
    "text": "El mapa logístico es una de las ecuaciones en diferencia más clásicas de la teoría del caos:\n\\[\nx_{n+1} = r\\,x_n\\,(1 - x_n)\n\\]\ndonde:\n\n\\(x_n \\in [0,1]\\) es la población normalizada.\n\\(r\\) regula la tasa de crecimiento."
  },
  {
    "objectID": "posts/mapa-logistico.html#simulación-en-python",
    "href": "posts/mapa-logistico.html#simulación-en-python",
    "title": "El Mapa Logístico",
    "section": "Simulación en Python",
    "text": "Simulación en Python\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr, x0, n = 3.9, 0.2, 100\nx = np.zeros(n)\nx[0] = x0\nfor i in range(1, n):\n    x[i] = r * x[i-1] * (1 - x[i-1])\n\nplt.plot(x, marker='o')\nplt.title(\"Evolución del mapa logístico\")\nplt.xlabel(\"Iteración n\")\nplt.ylabel(\"xₙ\")\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mi_blog_caos",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "posts/cobweb.html",
    "href": "posts/cobweb.html",
    "title": "Diagrama Cobweb Interactivo",
    "section": "",
    "text": "A la izquierda se muestra el diagrama cobweb y a la derecha la evolución temporal de (x_n). Ajusta el parámetro r con el deslizador.\n\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Función que calcula coordenadas de cobweb y serie de x_n\ndef compute_cobweb_and_series(r, x0=0.2, steps=40):\n    # Línea logística y la identidad\n    xs = np.linspace(0, 1, 200)\n    ys = r * xs * (1 - xs)\n\n    # Serie de iteraciones de la función logística\n    series = [x0]\n    x = x0\n    for _ in range(steps):\n        x = r * x * (1 - x)\n        series.append(x)\n\n    # Coordenadas para el diagrama cobweb\n    xc, yc = [series[0]], [series[0]]\n    for val in series[1:]:\n        # vertical\n        xc.append(xc[-1]); yc.append(val)\n        # horizontal\n        xc.append(val); yc.append(val)\n\n    return xs, ys, xc, yc, series\n\n# Valores de r para el slider\ne_rs = np.linspace(2.5, 4.0, 31)\nframes = []\nfor r in e_rs:\n    xs, ys, xc, yc, series = compute_cobweb_and_series(r)\n    frames.append(\n        go.Frame(\n            name=f\"{r:.2f}\",\n            data=[\n                go.Scatter(x=xs, y=ys, mode='lines'),\n                go.Scatter(x=xs, y=xs, mode='lines', line=dict(dash='dash')),\n                go.Scatter(x=xc, y=yc, mode='lines', line=dict(color='red')),\n                go.Scatter(x=list(range(len(series))), y=series, mode='lines+markers')\n            ]\n        )\n    )\n\n# Crear figura con subplots 1x2\ngrid = make_subplots(rows=1, cols=2, subplot_titles=(\"Cobweb\",\"Evolución de x_n\"))\n# Trazas iniciales (r = e_rs[0])\nr0 = e_rs[0]\nxs0, ys0, xc0, yc0, series0 = compute_cobweb_and_series(r0)\ngrid.add_trace(go.Scatter(x=xs0, y=ys0, mode='lines', name='f(x)'), row=1, col=1)\ngrid.add_trace(go.Scatter(x=xs0, y=xs0, mode='lines', name='y=x', line=dict(dash='dash')), row=1, col=1)\ngrid.add_trace(go.Scatter(x=xc0, y=yc0, mode='lines', name='Cobweb', line=dict(color='red')), row=1, col=1)\ngrid.add_trace(go.Scatter(x=list(range(len(series0))), y=series0, mode='lines+markers', name='x_n'), row=1, col=2)\n# Asignar frames y configurar animación\n\ngrid.frames = frames\nsteps = [dict(label=f\"{r:.2f}\", method=\"animate\",\n              args=[[f\"{r:.2f}\"], dict(mode=\"immediate\", frame=dict(duration=0, redraw=True), transition=dict(duration=0))])\n         for r in e_rs]\n\ngrid.update_layout(\n    width=1000, height=500,\n    sliders=[dict(active=0, pad=dict(t=50), steps=steps)],\n    updatemenus=[dict(type=\"buttons\", showactive=False,\n                      buttons=[dict(label=\"Play\", method=\"animate\",\n                                    args=[None, dict(frame=dict(duration=100, redraw=True), fromcurrent=True)])])]\n)\n\ngrid.show()"
  },
  {
    "objectID": "posts/cobweb.html#diagrama-cobweb-interactivo-con-serie-de-x_n",
    "href": "posts/cobweb.html#diagrama-cobweb-interactivo-con-serie-de-x_n",
    "title": "Diagrama Cobweb Interactivo",
    "section": "",
    "text": "A la izquierda se muestra el diagrama cobweb y a la derecha la evolución temporal de (x_n). Ajusta el parámetro r con el deslizador.\n\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Función que calcula coordenadas de cobweb y serie de x_n\ndef compute_cobweb_and_series(r, x0=0.2, steps=40):\n    # Línea logística y la identidad\n    xs = np.linspace(0, 1, 200)\n    ys = r * xs * (1 - xs)\n\n    # Serie de iteraciones de la función logística\n    series = [x0]\n    x = x0\n    for _ in range(steps):\n        x = r * x * (1 - x)\n        series.append(x)\n\n    # Coordenadas para el diagrama cobweb\n    xc, yc = [series[0]], [series[0]]\n    for val in series[1:]:\n        # vertical\n        xc.append(xc[-1]); yc.append(val)\n        # horizontal\n        xc.append(val); yc.append(val)\n\n    return xs, ys, xc, yc, series\n\n# Valores de r para el slider\ne_rs = np.linspace(2.5, 4.0, 31)\nframes = []\nfor r in e_rs:\n    xs, ys, xc, yc, series = compute_cobweb_and_series(r)\n    frames.append(\n        go.Frame(\n            name=f\"{r:.2f}\",\n            data=[\n                go.Scatter(x=xs, y=ys, mode='lines'),\n                go.Scatter(x=xs, y=xs, mode='lines', line=dict(dash='dash')),\n                go.Scatter(x=xc, y=yc, mode='lines', line=dict(color='red')),\n                go.Scatter(x=list(range(len(series))), y=series, mode='lines+markers')\n            ]\n        )\n    )\n\n# Crear figura con subplots 1x2\ngrid = make_subplots(rows=1, cols=2, subplot_titles=(\"Cobweb\",\"Evolución de x_n\"))\n# Trazas iniciales (r = e_rs[0])\nr0 = e_rs[0]\nxs0, ys0, xc0, yc0, series0 = compute_cobweb_and_series(r0)\ngrid.add_trace(go.Scatter(x=xs0, y=ys0, mode='lines', name='f(x)'), row=1, col=1)\ngrid.add_trace(go.Scatter(x=xs0, y=xs0, mode='lines', name='y=x', line=dict(dash='dash')), row=1, col=1)\ngrid.add_trace(go.Scatter(x=xc0, y=yc0, mode='lines', name='Cobweb', line=dict(color='red')), row=1, col=1)\ngrid.add_trace(go.Scatter(x=list(range(len(series0))), y=series0, mode='lines+markers', name='x_n'), row=1, col=2)\n# Asignar frames y configurar animación\n\ngrid.frames = frames\nsteps = [dict(label=f\"{r:.2f}\", method=\"animate\",\n              args=[[f\"{r:.2f}\"], dict(mode=\"immediate\", frame=dict(duration=0, redraw=True), transition=dict(duration=0))])\n         for r in e_rs]\n\ngrid.update_layout(\n    width=1000, height=500,\n    sliders=[dict(active=0, pad=dict(t=50), steps=steps)],\n    updatemenus=[dict(type=\"buttons\", showactive=False,\n                      buttons=[dict(label=\"Play\", method=\"animate\",\n                                    args=[None, dict(frame=dict(duration=100, redraw=True), fromcurrent=True)])])]\n)\n\ngrid.show()"
  }
]